var PhoneAnimation = (function () {
    function PhoneAnimation() {
        this.addClass = this.animateUp;
        this.removeClass = this.animateDown;
    }
    PhoneAnimation.prototype.animateUp = function (element, className, done) {
        if (className != 'active') {
            return;
        }
        element.css({
            position: 'absolute',
            top: 500,
            left: 0,
            display: 'block'
        });
        jQuery(element).animate({
            top: 0
        }, done);
    };
    PhoneAnimation.prototype.animateDown = function (element, className, done) {
        if (className != 'active') {
            return;
        }
        element.css({
            position: 'absolute',
            left: 0,
            top: 0
        });
        jQuery(element).animate({
            top: -500
        }, done);
    };
    PhoneAnimation.AnimationObject = function () {
        return function () {
            return new PhoneAnimation();
        };
    };
    return PhoneAnimation;
}());
var phonecatAnimations = angular.module('phonecatAnimations', ['ngAnimate']);
phonecatAnimations.animation('.phone', PhoneAnimation.AnimationObject());
'use strict'; //do we need this?
/* App Module */
var phonecatApp = angular.module('phonecatApp', [
    'ngRoute',
    'phonecatAnimations',
    'phonecatControllers',
    'phonecatFilters',
    'phonecatServices'
]);
phonecatApp.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider.
            when('/phones', {
            templateUrl: 'partials/phone-list.html',
            controller: 'PhoneListCtrl'
        }).
            when('/phones/:phoneId', {
            templateUrl: 'partials/phone-detail.html',
            controller: 'PhoneDetailCtrl'
        }).
            otherwise({
            redirectTo: '/phones'
        });
    }]);
'use strict';
var PhoneListCtrl = (function () {
    function PhoneListCtrl($scope, Phone) {
        this.$scope = $scope;
        this.Phone = Phone;
        $scope.phones = Phone.resource.query();
        $scope.orderProp = 'age';
    }
    PhoneListCtrl.$inject = ['$scope', 'Phone'];
    return PhoneListCtrl;
}());
var PhoneDetailCtrl = (function () {
    function PhoneDetailCtrl($scope, $routeParams, Phone) {
        this.$scope = $scope;
        this.$routeParams = $routeParams;
        this.Phone = Phone;
        $scope.phone = Phone.resource.get({ phoneId: $routeParams.phoneId }, function (phone) {
            $scope.mainImageUrl = phone.images[0];
        });
        $scope.setImage = function (imageUrl) {
            $scope.mainImageUrl = imageUrl;
        };
    }
    PhoneDetailCtrl.$inject = ['$scope', '$routeParams', 'Phone'];
    return PhoneDetailCtrl;
}());
var phonecatControllers = angular.module('phonecatControllers', []);
phonecatControllers.controller('PhoneListCtrl', PhoneListCtrl);
phonecatControllers.controller('PhoneDetailCtrl', PhoneDetailCtrl);
'use strict';
/* Filters */
angular.module('phonecatFilters', []).filter('checkmark', function () {
    return function (input) {
        return input ? '\u2713' : '\u2718';
    };
});
'use strict';
/* Services */
var PhoneService = (function () {
    //static $inject = ['$resource'];
    function PhoneService($resource, $q) {
        this.$resource = $resource;
        this.resource = this.$resource('phones/:phoneId.json', {}, {
            query: { method: 'GET', params: { phoneId: 'phones' }, isArray: true }
        });
    }
    return PhoneService;
}());
var phonecatServices = angular.module('phonecatServices', ['ngResource']);
var m = angular.module('phonecatServices');
m.service('Phone', function ($resource, $q) {
    return new PhoneService($resource, $q);
});
//# sourceMappingURL=data:application/json;base64,